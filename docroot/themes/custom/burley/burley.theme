<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Link;
use Drupal\block\Entity\Block;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Form\FormStateInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\file\Entity\File;
use Drupal\Core\Url;

/**
 * Implements hook_preprocess_page();
 */
function burley_preprocess_page(&$variables)
{

  $dev = (getenv('DRUPAL_THEME_MODE') == 'dev');

  if ($dev) {
    $libs = ['burley/dev-styling'];
  } else {
    $libs = ['burley/global-styling'];
  }

  foreach ($libs as $lib) {
    $variables['#attached']['library'][] = $lib;
  }

  // Junk
  unset($variables['navbar_attributes']);
  unset($variables['container']);

  // We shift this inwards to match design requirements
  if (!empty($variables['content_attributes']['class'])) {
    $variables['content_attributes']->removeClass('col');
  }

  $variables['content_main_attributes'] = new Attribute();
  $variables['content_main_attributes']->addClass('panels', 'main-container');

  // Mobile menus
  $menus = ["main", "header-menu"];

  $combined_tree = [];
  $menu_tree = \Drupal::menuTree();
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters(trim($menus[0]));
  $manipulators = [
    // Show links to nodes that are accessible for the current user.
    ['callable' => 'menu.default_tree_manipulators:checkNodeAccess'],
    // Only show links that are accessible for the current user.
    ['callable' => 'menu.default_tree_manipulators:checkAccess'],
    // Use the default sorting of menu links.
    ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
  ];
  // Force the entire tree to be build by setting expandParents to an
  // empty array.
  $parameters->expandedParents = [];
  // Iterate over the menus and merge them together.
  foreach ($menus as $menu_name) {
    $tree_items = $menu_tree->load(trim($menu_name), $parameters);
    $tree_manipulated = $menu_tree->transform($tree_items, $manipulators);
    $combined_tree = array_merge($combined_tree, $tree_manipulated);
  }

  $menu = $menu_tree->build($combined_tree);

  $menu['#theme'] = 'menu__mobile';
  $menu['#menu_name'] = 'mobile';

  $variables['mobile_menu'] = [
    '#prefix' => '<nav id="mobile-menu" role="navigation" aria-hidden="true" hidden style="dislay: none">',
    '#suffix' => '</nav>',
    '#markup' => \Drupal::service("renderer")->renderRoot($menu),
  ];

  // Enable wrapper by default
  $variables['add_content_outer_wrap'] = TRUE;

  // Get content type string
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node) {
    $variables['content_type'] = $node->type->entity->label();
    if ($node->bundle() == 'page') {
      $variables['content_type'] = '';
    }
  }

}

function burley_preprocess_page_title(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node) {
    $variables['title'] = ($node->getTitle());
  }
}

function burley_theme_suggestions_page_alter(array &$suggestions, array $variables) {

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $content_type = $node->bundle();
    $suggestions[] = 'page__'.$content_type;
  }
}